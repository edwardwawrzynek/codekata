/* automatically generated by rust-bindgen 0.56.0 */
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(non_upper_case_globals)]

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const BOARD_POS_INVALID: u32 = 255;
pub const WHITE: u32 = 0;
pub const BLACK: u32 = 1;
pub const KING: u32 = 0;
pub const PAWN: u32 = 1;
pub const KNIGHT: u32 = 2;
pub const ROOK: u32 = 3;
pub const BISHOP: u32 = 4;
pub const QUEEN: u32 = 5;
pub const BOARD_FLAGS_EP_SQUARE: u32 = 63;
pub const BOARD_FLAGS_EP_PRESENT: u32 = 64;
pub const BOARD_FLAGS_TURN: u32 = 128;
pub const BOARD_FLAGS_W_CASTLE_KING: u32 = 256;
pub const BOARD_FLAGS_W_CASTLE_QUEEN: u32 = 512;
pub const BOARD_FLAGS_B_CASTLE_KING: u32 = 1024;
pub const BOARD_FLAGS_B_CASTLE_QUEEN: u32 = 2048;
pub const MOVE_END: u64 = 0xffffffffffffffff;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __chess_util_bitboard = u64;
pub type __chess_util_board_pos = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __chess_util_board {
    pub players: [__chess_util_bitboard; 2usize],
    pub pieces: [__chess_util_bitboard; 6usize],
    pub flags: u16,
}
#[test]
fn bindgen_test_layout___chess_util_board() {
    assert_eq!(
        ::std::mem::size_of::<__chess_util_board>(),
        72usize,
        concat!("Size of: ", stringify!(__chess_util_board))
    );
    assert_eq!(
        ::std::mem::align_of::<__chess_util_board>(),
        8usize,
        concat!("Alignment of ", stringify!(__chess_util_board))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_board>())).players as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_board),
            "::",
            stringify!(players)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_board>())).pieces as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_board),
            "::",
            stringify!(pieces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_board>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_board),
            "::",
            stringify!(flags)
        )
    );
}
pub type __chess_util_move = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __chess_util_move_gen {
    pub board: *mut __chess_util_board,
    pub occupancy_for_sliders: __chess_util_bitboard,
    pub occupancy_for_pawns: __chess_util_bitboard,
    pub final_moves_mask: __chess_util_bitboard,
    pub cur_mode: u8,
    pub cur_piece_type: u8,
    pub cur_square: u8,
    pub cur_promotion: u8,
    pub cur_moves: __chess_util_bitboard,
    pub done: u8,
    pub hit_move: u8,
}
#[test]
fn bindgen_test_layout___chess_util_move_gen() {
    assert_eq!(
        ::std::mem::size_of::<__chess_util_move_gen>(),
        56usize,
        concat!("Size of: ", stringify!(__chess_util_move_gen))
    );
    assert_eq!(
        ::std::mem::align_of::<__chess_util_move_gen>(),
        8usize,
        concat!("Alignment of ", stringify!(__chess_util_move_gen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_move_gen>())).board as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(board)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__chess_util_move_gen>())).occupancy_for_sliders as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(occupancy_for_sliders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__chess_util_move_gen>())).occupancy_for_pawns as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(occupancy_for_pawns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__chess_util_move_gen>())).final_moves_mask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(final_moves_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_move_gen>())).cur_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(cur_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__chess_util_move_gen>())).cur_piece_type as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(cur_piece_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__chess_util_move_gen>())).cur_square as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(cur_square)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__chess_util_move_gen>())).cur_promotion as *const _ as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(cur_promotion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_move_gen>())).cur_moves as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(cur_moves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_move_gen>())).done as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__chess_util_move_gen>())).hit_move as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(__chess_util_move_gen),
            "::",
            stringify!(hit_move)
        )
    );
}
#[doc = " A bitboard is a data structure mapping one bit to one square on the board."]
#[doc = " For chess, a bitboard stores a single boolean for each square."]
#[doc = ""]
#[doc = " Implemented as a single 64-bit word. Squares map to bits in little endian"]
#[doc = " order:"]
#[doc = "    a  b  c  d  e  f  g  h"]
#[doc = "   ------------------------"]
#[doc = " 8| 56 57 58 59 60 61 62 63"]
#[doc = " 7| 48 49 50 51 52 53 54 55"]
#[doc = " 6| 40 41 42 43 44 45 46 47"]
#[doc = " 5| 32 33 34 35 36 37 38 39"]
#[doc = " 4| 24 25 26 27 28 29 30 31"]
#[doc = " 3| 16 17 18 19 20 21 22 23"]
#[doc = " 2| 08 09 10 11 12 13 14 15"]
#[doc = " 1| 00 01 02 03 04 05 06 07"]
#[doc = ""]
#[doc = " Bitboards are efficient because we can apply bitwise operations on them,"]
#[doc = " which the cpu can perform quickly."]
pub type bitboard = __chess_util_bitboard;
#[doc = " A position on a bitboard -- a single square."]
#[doc = ""]
#[doc = " Implemented as a bitboard index"]
pub type board_pos = __chess_util_board_pos;
#[link(name = "chess-util", kind="static")]
extern "C" {
    #[doc = " Check if the bit is set for the given square"]
    pub fn bitboard_check_square(board: bitboard, square: board_pos) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return the bitboard with the bit for square set"]
    pub fn bitboard_set_square(board: bitboard, square: board_pos) -> bitboard;
}
extern "C" {
    #[doc = " Return the bitboard with the bit for square cleared"]
    pub fn bitboard_clear_square(board: bitboard, square: board_pos) -> bitboard;
}
extern "C" {
    #[doc = " Return the bitboard with the bit for square flipped"]
    pub fn bitboard_flip_square(board: bitboard, square: board_pos) -> bitboard;
}
extern "C" {
    #[doc = " Population count: Count the numbers of bits set (== 1) in the bitboard"]
    pub fn bitboard_popcount(board: bitboard) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the index of the first bit set in the bitboard (starting from the least"]
    #[doc = " significant bit)"]
    pub fn bitboard_scan_lsb(board: bitboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitboard_shift_n(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_s(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_w(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_e(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_nw(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_ne(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_sw(board: bitboard) -> bitboard;
}
extern "C" {
    pub fn bitboard_shift_se(board: bitboard) -> bitboard;
}
extern "C" {
    #[doc = " Print a bitboard on stdout using only ascii"]
    pub fn bitboard_print(board: bitboard);
}
extern "C" {
    #[doc = " Print a bitboard on stdout using ansi escapes + unicode"]
    pub fn bitboard_print_pretty(board: bitboard);
}
extern "C" {
    #[doc = " Convert x and y coordinates to a board_pos"]
    #[doc = " if x and y describe an invalid board position, BOARD_POS_INVALID is returned"]
    pub fn board_pos_from_xy(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> board_pos;
}
extern "C" {
    #[doc = " Convert a board_pos to x and y coordinates"]
    #[doc = " Sets *x and *y to the resulting position"]
    pub fn board_pos_to_xy(
        pos: board_pos,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn board_pos_to_x(pos: board_pos) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn board_pos_to_y(pos: board_pos) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a board_pos to algebraic notation (eg a1, h6, etc)"]
    #[doc = " The result will be stored in str, which must be at least 3 bytes"]
    pub fn board_pos_to_str(pos: board_pos, str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Convert a pos in algebraic notation to a board_pos"]
    pub fn board_pos_from_str(str_: *const ::std::os::raw::c_char) -> board_pos;
}
pub type board = __chess_util_board;
extern "C" {
    #[doc = " check that board is in a consistent state"]
    pub fn board_invariants(board: *const board);
}
extern "C" {
    #[doc = " initialize a board from a board in FEN notation"]
    pub fn board_from_fen_str(board: *mut board, fen_string: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " express a board in FEN notation (minus halfmove + turn counters)"]
    #[doc = " res_str must have 87 bytes allocated"]
    pub fn board_to_fen_str(board: *const board, res_str: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " get the piece at the given square, or -1 if no piece is on the square"]
    pub fn board_piece_on_square(board: *const board, square: board_pos) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get the player controlling the piece at the given square, or -1 if no piece"]
    #[doc = " is on the square"]
    pub fn board_player_on_square(board: *const board, square: board_pos) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get which player's turn it is for the board"]
    pub fn board_player_to_move(board: *const board) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get the en passant target square for the board, or BOARD_POS_INVALID if there"]
    #[doc = " is no target square"]
    #[doc = ""]
    #[doc = " the en passant target square is the square which a pawn skipped while moving"]
    #[doc = " forwards 2 squares last turn the en passant target square is directly behind"]
    #[doc = " the pawn this turn, that pawn can be capture by moving onto the en passant"]
    #[doc = " target square"]
    #[doc = ""]
    #[doc = " if no pawn was moves forwards 2 squares last turn, then there is no en"]
    #[doc = " passant target square"]
    pub fn board_get_en_passant_target(board: *const board) -> board_pos;
}
extern "C" {
    #[doc = " check if player can castle (side should be either KING or QUEEN)"]
    pub fn board_can_castle(
        board: *const board,
        player: ::std::os::raw::c_int,
        side: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " print a board on stdout using ony ascii characters"]
    pub fn board_print(board: *const board);
}
extern "C" {
    #[doc = " print a board on stdout using ansi escapes + unicode"]
    pub fn board_print_pretty(board: *const board);
}
extern "C" {
    #[doc = " Convert a piece character to a piece index"]
    #[doc = " pawn: P + p, knight: N + n, bishop: B + b, rook: R + r, queen: Q + q, king: K"]
    #[doc = " + k"]
    pub fn board_piece_char_to_piece(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a piece character to a player index"]
    #[doc = " white: P, N, B, R, Q, K"]
    #[doc = " black: p, n, b, r, q, k"]
    pub fn board_piece_char_to_player(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " convert a piece and player index into a character representing that piece"]
    #[doc = " white: P, N, B, R, Q, K"]
    #[doc = " black: p, n, b, r, q, k"]
    pub fn board_piece_char_from_piece_player(
        piece: ::std::os::raw::c_int,
        player: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " pre generate move generation lookup tables"]
    pub fn move_gen_pregenerate();
}
#[doc = " move represents a single piece move on a board"]
#[doc = ""]
#[doc = " Implementation:"]
#[doc = " move has to be reversible"]
#[doc = " bits 0-15  : board's previous flags"]
#[doc = " bits 16-21 : move source"]
#[doc = " bits 22-27 : move destination"]
#[doc = " bit  28    : set if the move is a promotion"]
#[doc = " bits 31-29 : promotion piece value"]
#[doc = " bit  32    : set if the move is a capture"]
#[doc = " bits 33-35 : type of captured piece"]
#[doc = " bits 36-41 : square capture piece was on (may be different from move"]
#[doc = " destination due to en passant)"]
pub type move_ = __chess_util_move;
extern "C" {
    #[doc = " get the source square of a move (where a piece is being moved from )"]
    pub fn move_source_square(move_: move_) -> board_pos;
}
extern "C" {
    #[doc = " get the destination square of a move (where a piece is being moved to)"]
    pub fn move_destination_square(move_: move_) -> board_pos;
}
extern "C" {
    #[doc = " check if a move is a promotion"]
    pub fn move_is_promotion(move_: move_) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " if a move is a promotion, return what piece it is being promoted to"]
    #[doc = " return -1 otherwise"]
    pub fn move_promotion_piece(move_: move_) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " check if a move is a capture"]
    pub fn move_is_capture(move_: move_) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " if a move is a capture, return what piece type is being captured"]
    #[doc = " return -1 otherwise"]
    pub fn move_capture_piece(move_: move_) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " return 1 if a move is a castle, 0 otherwise"]
    pub fn move_is_castle(move_: move_) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " if a move is a capture, return what square is being captured"]
    #[doc = " return BOARD_POS_INVALID otherwise"]
    #[doc = " in most cases, this is the same as the move's destination"]
    #[doc = " for en passant, it is different"]
    pub fn move_capture_square(move_: move_) -> board_pos;
}
extern "C" {
    #[doc = " convert a move to a string in pure algebraic notation, which is of the form:"]
    #[doc = " <src><dst><promote?>"]
    #[doc = " for example, moving a piece (of any type) from e2 to e4 is:"]
    #[doc = " e2e4"]
    #[doc = " moving a pawn from a7 to a8 and promoting to a queen is:"]
    #[doc = " a7a8q"]
    #[doc = " a7a8n (promoting to knight)"]
    #[doc = " a7a8b (promoting to bishop)"]
    #[doc = " a7a8r (promoting to rook)"]
    #[doc = ""]
    #[doc = " res_str must have 6 bytes allocated"]
    pub fn move_to_str(move_: move_, res_str: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " construct a move from a string and a board"]
    #[doc = " board must be a legal board for the move to be applied on (but the move will"]
    #[doc = " not actually be made on it)"]
    pub fn move_from_str(move_str: *const ::std::os::raw::c_char, board: *const board) -> move_;
}
extern "C" {
    #[doc = " check if a move string is wellformed (corresponds to a chess move)"]
    #[doc = " this does not check if the move is legal"]
    pub fn move_str_is_wellformed(move_str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[doc = " move_gen contains the state of the move generation algorithm"]
pub type move_gen = __chess_util_move_gen;
extern "C" {
    #[doc = " initialize a move_gen structure for a given board"]
    pub fn move_gen_init(move_gen: *mut move_gen, board: *mut board);
}
extern "C" {
    #[doc = " check if a square on the board is attacked by a certain player"]
    #[doc = " return a bitboard with each square set that is threatening the square"]
    #[doc = " if the square is not attacked, the bitboard is 0"]
    pub fn board_is_square_attacked(
        board: *const board,
        square: board_pos,
        attacking_player: ::std::os::raw::c_int,
    ) -> bitboard;
}
extern "C" {
    #[doc = " check if player is in check (ie -- player's king is attacked by opponent)"]
    pub fn board_player_in_check(board: *const board, player: ::std::os::raw::c_int) -> bitboard;
}
extern "C" {
    #[doc = " get the next move from the move generator"]
    #[doc = " if no more moves are available, the method returns MOVE_END"]
    pub fn move_gen_next_move(generator: *mut move_gen) -> move_;
}
extern "C" {
    #[doc = " get the next move from the move generator and apply it to board"]
    #[doc = " if no more moves are available, the method returns MOVE_END"]
    #[doc = " you MUST undo the move before calling move_gen_make_next_move or"]
    #[doc = " move_gen_next_move again"]
    pub fn move_gen_make_next_move(generator: *mut move_gen) -> move_;
}
extern "C" {
    #[doc = " make the given move on the given board"]
    #[doc = " mutates board"]
    pub fn board_make_move(board: *mut board, move_: move_);
}
extern "C" {
    #[doc = " undo the given move on the given board"]
    #[doc = " the move must have been previously made on the board"]
    #[doc = " mutates board"]
    pub fn board_unmake_move(board: *mut board, move_: move_);
}
extern "C" {
    #[doc = " check if the player to move on the board the move_gen is associated with is"]
    #[doc = " in checkmate/stalemate this must be called after the move_gen has been"]
    #[doc = " exhausted (all moves generated, MOVE_END returned)"]
    pub fn move_gen_is_checkmate(move_gen: *const move_gen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn move_gen_is_stalemate(move_gen: *const move_gen) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " check if a board is checkmated or stalemated for the player to move"]
    #[doc = " move_gen_is_checkmate and move_gen_is_stalemate are faster if you have"]
    #[doc = " already run a move_gen"]
    pub fn board_is_checkmate(board: *const board) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn board_is_stalemate(board: *const board) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " check if two moves are the same move"]
    pub fn moves_equal(move0: move_, move1: move_) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " check if a move is legal on the board"]
    #[doc = " note: this is slow -- it runs through move generation for the board"]
    #[doc = " moves generated by move_gen_next_move and move_gen_make_next_move are always"]
    #[doc = " legal"]
    pub fn move_is_legal(move_to_check: move_, board: *mut board) -> ::std::os::raw::c_int;
}
